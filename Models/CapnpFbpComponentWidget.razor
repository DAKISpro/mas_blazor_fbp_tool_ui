@inject Mas.Infrastructure.Common.ConnectionManager ConMan

@using System.Collections.Generic;
@using Blazor.Diagrams.Components.Renderers;
@using BlazorDrawFBP.Models;
@using BlazorDrawFBP.Renderers
@using System.Text
@using System.Diagnostics.Metrics
@using _Imports = MudBlazor._Imports
@using System.Diagnostics
@using System.Reflection
@using System.Threading
@using Mas.Schema.Fbp

<div>
    <MudCard Style="@MinHeight">
        <MudCardHeader>
            @*<CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary"
                           >@InterpreterShortcut(Node.PathToInterpreter)</MudAvatar>
            </CardHeaderAvatar>*@
            <CardHeaderContent>
                <MudTextField Class="d-inline-flex pr-4"
                              @bind-Value="Node.ProcessName"
                              Label="Process name"
                              Variant="Variant.Outlined"/>
                <MudToggleIconButton Style="position: absolute; right: -5px; top: -5px;"
                                     @bind-Toggled="@ParallelOn"
                                     Icon="@Icons.Material.Filled.PlaylistAddCircle" 
                                     Color="@Color.Primary" 
                                     Title="Parallel On"
                                     ToggledIcon="@Icons.Material.Filled.LooksOne" 
                                     ToggledColor="@Color.Secondary" 
                                     ToggledTitle="Parallel Off"/>
                <MudToggleIconButton Style="position: absolute; right: -5px; top: 25px;"
                                     Toggled="@_processStarted"
                                     ToggledChanged="@StartProcess"
                                     Icon="@Icons.Material.Filled.PlayCircle"
                                     Color="@Color.Primary" 
                                     Title="Start process"
                                     ToggledIcon="@Icons.Material.Filled.StopCircle" 
                                     ToggledColor="@Color.Secondary" 
                                     ToggledTitle="Stop process"/>
                @if (ParallelOn)
                {
                    <MudNumericField Class="d-inline-flex pr-6" Style="width: 80px;" 
                                     @bind-Value="Node.InParallelCount"
                                     Label="#Procs"
                                     Variant="Variant.Outlined"
                                     Min="1" Max="10000"/>
                }
                @if (!Node.Editable && Node.ShortDescription.Length > 0)
                {
                    <MudField Label="Description"
                              Variant="Variant.Outlined">
                        <MudText Typo="Typo.body2">@Node.ShortDescription</MudText>
                    </MudField>
                }
            </CardHeaderContent>
            @*<CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Default"
                               OnClick="() => Node.Editable = !Node.Editable"/>
            </CardHeaderActions>*@
        </MudCardHeader>
        @* <MudCardMedia Image="images/pilars.jpg" Height="250" /> *@
        @if (Node.Editable || Node.DefaultConfigString.Length > 0)
        {
            <MudCardContent>
                @if (!Node.Editable && Node.DefaultConfigString.Length > 0)
                {
                    <MudField Label="Default TOML config"
                              Variant="Variant.Outlined">
                        <MudText Typo="Typo.body2">@Node.DefaultConfigString</MudText>
                    </MudField>
                }
                @if (Node.Editable)
                {
                    <MudTextField T="string"
                                  @bind-Value="Node.DefaultConfigString"
                                  Lines="2"
                                  Label="Default TOML config (Key=Value)"
                                  Variant="Variant.Outlined"/>
                    <MudField Label="Component data"
                              Variant="Variant.Outlined">
                        <MudTextField @bind-Value="Node.ComponentId"
                                      Label="Id"
                                      Variant="Variant.Outlined"/>
                        <MudTextField @bind-Value="Node.ComponentName"
                                      Label="Name"
                                      Variant="Variant.Outlined"/>
                        <MudTextField @bind-Value="Node.ShortDescription"
                                      Label="Description"
                                      Variant="Variant.Outlined"/>
                        @if ((Node.ComponentId ?? "") == "")
                        {
                            <MudTextField T="string"
                                          @bind-Value="Node.Cmd"
                                          Label="Commandline"
                                          Variant="Variant.Outlined"/>
                        }
                    </MudField>
                }
            </MudCardContent>
        }
    </MudCard>

    @foreach (var port in Node.Ports)
    {
        if (port is not CapnpFbpPortModel capnpPort) continue;

        /*var orderNo = Node.Ports.Where(p =>
        {
            if (p is CapnpFbpPortModel cp) return cp.ThePortType == capnpPort.ThePortType;
            return false;
        }).TakeWhile(p => p != port).Count();
        */
        
        var portCount = Node.Ports.Where(p =>
        {
            if (p is CapnpFbpPortModel cp) return cp.ThePortType == capnpPort.ThePortType;
            return false;
        }).Count();

        var offsets = capnpPort.Alignment switch
        {
            PortAlignment.Left => _leftRightOffsetsMap[Math.Min(portCount, 11)],
            PortAlignment.Right => _leftRightOffsetsMap[Math.Min(portCount, 11)],
            PortAlignment.Top => _topBottomOffsets,
            PortAlignment.Bottom => _topBottomOffsets,
            _ => []
        };
        if (capnpPort.Alignment is PortAlignment.Right or PortAlignment.Bottom)
        {
            offsets = new List<int>(offsets);
            offsets.Reverse();
        }

        var capnpPortOffset = capnpPort.Alignment switch
        {
            PortAlignment.Left => offsets[capnpPort.OrderNo],
            PortAlignment.Top => offsets[capnpPort.OrderNo - 11],
            PortAlignment.Right => offsets[capnpPort.OrderNo],
            PortAlignment.Bottom => offsets[capnpPort.OrderNo - 11],
            _ => 0
        };

        var style = capnpPort.Alignment switch
        {
            PortAlignment.Left => $"top: {50 + capnpPortOffset}%;",
            PortAlignment.Top => $"left: {50 + capnpPortOffset}%;",
            PortAlignment.Right => $"top: {50 + capnpPortOffset}%;",
            PortAlignment.Bottom => $"left: {50 + capnpPortOffset}%;",
            _ => ""
        };
        
        // Console.WriteLine(capnpPort.ThePortType.ToString() + " OrderNo: " + capnpPort.OrderNo + " -> " + style);
        <CapnpFbpPortRenderer @key="port" Port="capnpPort" Style="@style">
            @($"{capnpPort.ThePortType.ToString().ToUpper()[0]} {capnpPort.Name}")
        </CapnpFbpPortRenderer>
    }
</div>

@code {
    [Parameter] public CapnpFbpComponentModel Node { get; set; } = null!;
    
    private string MinHeight =>
        $@"min-height: {Math.Max(100, Math.Max(
            Node.Ports.Count(p =>
            {
                if (p is CapnpFbpPortModel cp) return cp.ThePortType == CapnpFbpPortModel.PortType.In;
                return false;
            }) * 2 * 20, 
            Node.Ports.Count(p =>
            {
                if (p is CapnpFbpPortModel cp) return cp.ThePortType == CapnpFbpPortModel.PortType.Out;
                return false;
            }) * 2 * 20 
        ))}px";

    private bool ParallelOn
    {
        get => Node.InParallelCount > 1;
        set => Node.InParallelCount = value ? 2 : 1;
    }

    private async Task StartProcess(bool start)
    {
        try
        {
            if (Node.ChannelStarterService == null || Node.Runnable == null) return;

            Console.WriteLine($"StartProcess start={start}");

            if (start) // stop
            {
                List<Mas.Schema.Fbp.PortInfos.NameAndSR> inPortSRs = [];
                List<Mas.Schema.Fbp.PortInfos.NameAndSR> outPortSRs = [];
                foreach (var pl in Node.Links)
                {
                    if (pl is not RememberCapnpPortsLinkModel rcplm) continue;

                    List<PortModel> ps = [rcplm.TargetPortModel];
                    if (rcplm.SourcePortModel is CapnpFbpIipPortModel iipp) ps.Add(iipp);
                    else continue;

                    foreach (var p in ps)
                    {
                        switch (p)
                        {
                            case CapnpFbpPortModel port:
                                if (port.ReaderWriterSturdyRef == null && port.ChannelTask != null)
                                {
                                    Console.WriteLine("awaiting port.ChannelTask");
                                    await port.ChannelTask;
                                }
                                switch (port.ThePortType)
                                {
                                    case CapnpFbpPortModel.PortType.In:
                                        inPortSRs.Add(new PortInfos.NameAndSR
                                        {
                                            Name = port.Name,
                                            Sr = port.ReaderWriterSturdyRef,
                                        });
                                        break;
                                    case CapnpFbpPortModel.PortType.Out:
                                        outPortSRs.Add(new PortInfos.NameAndSR
                                        {
                                            Name = port.Name,
                                            Sr = port.ReaderWriterSturdyRef,
                                        });
                                        break;
                                }

                                break;
                            case CapnpFbpIipPortModel iipPort:
                                if (iipPort.Parent is not CapnpFbpIipModel iipModel) continue;
                                if (iipPort.WriterSturdyRef == null && iipPort.ChannelTask != null)
                                {
                                    Console.WriteLine("awaiting iipPort.ChannelTask");
                                    await iipPort.ChannelTask;
                                }

                                Task.Run(async () =>
                                {
                                    var content = iipModel.Content;
                                    Console.WriteLine($"before connecting to writer for iip iipPort.ChannelTask: {iipPort.ChannelTask?.IsCompletedSuccessfully}");
                                    iipPort.Writer = await ConMan.Connect<Mas.Schema.Fbp.Channel<Mas.Schema.Fbp.IP>.IWriter>(iipPort.WriterSturdyRef);
                                    await iipPort.Writer.Write(new Channel<IP>.Msg { Value = new IP { Content = content } });
                                    Console.WriteLine("after connecting to writer for iip");
                                });
                                break;
                        }
                    }
                }
                Console.WriteLine("Trying to start channel");
                var si = await Node.ChannelStarterService.Create(new StartChannelsService.Params
                {
                    Name = $"config_{Node.ProcessName}"
                });
                Console.WriteLine($"Channel started si.Count={si.Count}, si[0].ReaderSRs.Count={si[0].ReaderSRs.Count}, si[0].WriterSRs.Count={si[0].WriterSRs.Count}");
                if (si.Count == 0 || si[0].ReaderSRs.Count == 0 || si[0].WriterSRs.Count == 0) return;
                _processStarted = await Node.Runnable.Start(si[0].ReaderSRs[0]);
                if (!_processStarted) return;
                Console.WriteLine($"Runnable started: {_processStarted}");
                using var writer = await ConMan.Connect<Mas.Schema.Fbp.Channel<Mas.Schema.Fbp.PortInfos>.IWriter>(si[0].WriterSRs[0]);
                await writer.Write(new Channel<PortInfos>.Msg
                {
                    Value = new PortInfos
                    {
                        InPorts = inPortSRs,
                        OutPorts = outPortSRs,
                    }
                });
                Console.WriteLine("Wrote PortInfos to PortInfoChannel");
                //close writer
                await writer.Close();

                //close port infos channel
                using var channel = await ConMan.Connect<Mas.Schema.Fbp.IChannel<Mas.Schema.Fbp.PortInfos>>(si[0].ChannelSR);
                await channel.Close(false);
            }
            else // stop
            {
                _processStarted = await Node.Runnable.Stop();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Caught exception: " + e);
        }
        StateHasChanged();
    }

    private bool _processStarted = false;
    private bool ProcessStarted
    {
        get => _processStarted;
        set => _processStarted = value;
    }

    private async void NotifyOfNewOutPort()
    {
        Console.WriteLine("sending new out port message");
        //await Node.PortCallback.NewOutPort("out", null);
        Console.WriteLine("sent new out port message");
    }
    
    private readonly Dictionary<int, List<int>> _leftRightOffsetsMap = new()
    {
        { 1, new List<int> { 0 } },
        { 2, new List<int> { 30, -30 } },
        { 3, new List<int> { 30, 0, -30 } },
        { 4, new List<int> { 30, 10, -10, -30 } },
        { 5, new List<int> { 30, 15, 0, -15, -30 } },
        { 6, new List<int> { 30, 15, 0, -15, -30, -45 } },
        { 7, new List<int> { 30, 20, 10, 0, -10, -20, -30 } },
        { 8, new List<int> { 35, 25, 15, 5, -5, -15, -25, -35 } },
        { 9, new List<int> { 40, 30, 20, 10, 0, -10, -20, -30, -40 } },
        { 10, new List<int> { -45, -35, -25, -15, -5, 5, 15, 25, 35, 45 } },
        { 11, new List<int> { 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50 } },
    };

    private readonly List<int> _topBottomOffsets = new() { -40, -30, -20, -10, 0, 10, 20, 30, 40 };

    private readonly Dictionary<PortAlignment, int> _portCounts = new();

    static string InterpreterShortcut(string path)
    {
        if (path == null) return "Exe";
        if (path.Contains("python")) return "Py";
        if (path.Contains("python3")) return "Py3";
        if (path.Contains("node")) return "Js";
        return "";
    }




}